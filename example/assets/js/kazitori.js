// Generated by CoffeeScript 1.3.3
/*
	(c) 2013 Eikichi Yamaguchi
	kazitori.js may be freely distributed under the MIT license.
	http://dev.hageee.net

	fork from::
//     (c) 2010-2012 Jeremy Ashkenas, DocumentCloud Inc.
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org
*/

var Kazitori, delegater, escapeRegExp, namedParam, optionalParam, routeStripper, splatParam, trailingSlash,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

delegater = function(target, func) {
  return function() {
    return func.apply(target, arguments);
  };
};

trailingSlash = /\/$/;

routeStripper = /^[#\/]|\s+$/g;

escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;

namedParam = /:\w+/g;

optionalParam = /\((.*?)\)/g;

splatParam = /\*\w+/g;

/*
# ほとんど Backbone.Router と Backbone.History から拝借。
# jQuery や underscore に依存していないのでいろいろなライブラリと組み合わせられるはず。
# もっと高級なことしたけりゃ素直に Backbone 使うことをおぬぬめ。
#
*/


Kazitori = (function() {

  Kazitori.prototype.history = null;

  Kazitori.prototype.location = null;

  Kazitori.prototype.handlers = [];

  Kazitori.prototype.root = null;

  Kazitori.prototype.breaker = {};

  function Kazitori(options) {
    var docMode, win;
    this.options = options || (options = {});
    if (options.routes) {
      this.routes = options.routes;
    }
    this.root = options.root ? options.root : '/';
    win = window;
    if (typeof win !== 'undefined') {
      this.location = win.location;
      this.history = win.history;
    }
    docMode = document.docmentMode;
    this.isOldIE = (win.navigator.userAgent.toLowerCase().indexOf('msie') !== -1) && (!docMode || docMode < 7);
    this._bindRules();
    if (__indexOf.call(options, "isAutoStart") < 0 || options["isAutoStart"] !== false) {
      this.start();
    }
    return;
  }

  Kazitori.prototype.start = function(options) {
    var atRoot, fragment, frame, win;
    if (Kazitori.started) {
      throw new Error('mou hazim matteru');
    }
    Kazitori.started = true;
    win = window;
    this.options = this._extend({}, {
      root: '/'
    }, this.options, options);
    this._hasPushState = !!(this.history && this.history.pushState);
    this._wantChangeHash = this.options.hashChange !== false;
    fragment = this.getFragment();
    atRoot = this.location.pathname.replace(/[^\/]$/, '$&/') === this.root;
    if (this.isOldIE && this._wantChangeHash) {
      frame = document.createElement("iframe");
      frame.setAttribute("src", "javascript:0");
      frame.setAttribute("tabindex", "-1");
      frame.style.display = "none";
      document.body.appendChild(frame);
      this.iframe = frame.contentWindow;
      this.change(fragment);
    }
    if (this._hasPushState === true) {
      win.addEventListener('popstate', delegater(this, this.observeURLHandler));
    } else if (this._wantChangeHash === true && (__indexOf.call(win, 'onhashchange') >= 0) && !this.isOldIE) {
      win.addEventListener('hashchange', delegater(this, this.observeURLHandler));
    }
    if (this._hasPushState && atRoot && this.location.hash) {
      this.fragment = this.getHash().replace(routeStripper, '');
      this.history.replaceState({}, document.title, this.root + this.fragment + this.location.search);
    }
    if (!this.options.silent) {
      return this.loadURL();
    }
  };

  Kazitori.prototype.stop = function() {
    var win;
    win = window;
    win.removeEventListener('popstate', arguments.callee);
    return win.removeEventListener('hashchange', arguments.callee);
  };

  Kazitori.prototype.change = function(fragment, options) {
    var frag, url;
    if (!Kazitori.started) {
      return false;
    }
    if (!options) {
      options = {
        'trigger': options
      };
    }
    frag = this.getFragment(fragment || '');
    if (this.fragment === frag) {
      return;
    }
    this.fragment = frag;
    url = this.root + frag;
    if (this._hasPushState) {
      this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);
    } else if (this._wantChangeHash) {
      this._updateHash(this.location, frag, options.replace);
      if (this.iframe && (frag !== this.getFragment(this.getHash(this.iframe)))) {
        if (!options.replace) {
          this.iframe.document.open().close();
        }
        this._updateHash(this.iframe.location, frag, options.replace);
      }
    } else {
      return this.location.assign(url);
    }
    this.loadURL(frag);
  };

  Kazitori.prototype.route = function(rule, name, callback) {
    if (typeof rule !== RegExp) {
      rule = this._ruleToRegExp(rule);
    }
    if (!callback) {
      callback = this[name];
    }
    this.handlers.unshift({
      rule: rule,
      callback: this._binder(function(fragment) {
        var args;
        args = this._extractParams(rule, fragment);
        return callback && callback.apply(this, args);
      }, this)
    });
    return this;
  };

  Kazitori.prototype.loadURL = function(fragmentOverride) {
    var fragment, handler, matched, _i, _len, _ref;
    fragment = this.fragment = this.getFragment(fragmentOverride);
    matched = [];
    _ref = this.handlers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      handler = _ref[_i];
      if (handler.rule.test(fragment)) {
        handler.callback(fragment);
        matched.push(true);
      }
    }
    return matched;
  };

  Kazitori.prototype.observeURLHandler = function(event) {
    var current;
    current = this.getFragment();
    if (current === this.fragment && this.iframe) {
      current = this.getFragment(this.getHash(this.iframe));
    }
    if (current === this.fragment) {
      return false;
    }
    if (this.iframe) {
      this.change(current);
    }
    return this.loadURL() || this.loadURL(this.getHash());
  };

  Kazitori.prototype._bindRules = function() {
    var route, routes, _i, _len;
    if (!(this.routes != null)) {
      return;
    }
    routes = this._keys(this.routes);
    for (_i = 0, _len = routes.length; _i < _len; _i++) {
      route = routes[_i];
      this.route(route, this.routes[route]);
    }
  };

  Kazitori.prototype._updateHash = function(location, fragment, replace) {
    var href;
    if (replace) {
      href = location.href.replace(/(javascript:|#).*$/, '');
      location.replace(href + '#' + fragment);
    } else {
      location.hash = "#" + fragment;
    }
  };

  Kazitori.prototype.getFragment = function(fragment) {
    var root;
    if (!(fragment != null)) {
      if (this._hasPushState || !this._wantChangeHash) {
        fragment = this.location.pathname;
        root = this.root.replace(trailingSlash, '');
        if (!fragment.indexOf(root)) {
          fragment = fragment.substr(root.length);
        }
      } else {
        fragment = this.getHash();
      }
    }
    return fragment.replace(routeStripper, '');
  };

  Kazitori.prototype.getHash = function() {
    var match;
    match = (window || this).location.href.match(/#(.*)$/);
    if (match != null) {
      return match[1];
    } else {
      return '';
    }
  };

  Kazitori.prototype._extractParams = function(rule, fragment) {
    return rule.exec(fragment).slice(1);
  };

  Kazitori.prototype._ruleToRegExp = function(rule) {
    var newRule;
    newRule = rule.replace(escapeRegExp, '\\$&').replace(optionalParam, '(?:$1)?').replace(namedParam, '([^\/]+)').replace(splatParam, '(.*?)');
    return new RegExp('^' + newRule + '$');
  };

  Kazitori.prototype._slice = Array.prototype.slice;

  Kazitori.prototype._keys = Object.keys || function(obj) {
    var key, keys;
    if (obj === !Object(obj)) {
      throw new TypeError('object ja nai');
    }
    keys = [];
    for (key in obj) {
      if (Object.hasOwnProperty.call(obj, key)) {
        keys[keys.length] = key;
      }
    }
    return keys;
  };

  Kazitori.prototype._binder = function(func, obj) {
    var args, slice;
    slice = this._slice;
    args = slice.call(arguments, 2);
    return function() {
      return func.apply(obj || {}, args.concat(slice.call(arguments)));
    };
  };

  Kazitori.prototype._extend = function(obj) {
    this._each(this._slice.call(arguments, 1), function(source) {
      var prop, _results;
      if (source) {
        _results = [];
        for (prop in source) {
          _results.push(obj[prop] = source[prop]);
        }
        return _results;
      }
    });
    return obj;
  };

  Kazitori.prototype._each = function(obj, iter, ctx) {
    var each, i, k, l;
    if (!(obj != null)) {
      return;
    }
    each = Array.prototype.forEach;
    if (each && obj.forEach === each) {
      return obj.forEach(iter, ctx);
    } else if (obj.length === +obj.length) {
      i = 0;
      l = obj.length;
      while (i < l) {
        if (iter.call(ctx, obj[i], i, obj) === this.breaker) {
          return;
        }
        i++;
      }
    } else {
      for (k in obj) {
        if (__indexOf.call(obj, k) >= 0) {
          if (iter.call(ctx, obj[k], k, obj) === this.breaker) {
            return;
          }
        }
      }
    }
  };

  return Kazitori;

})();

Kazitori.started = false;
