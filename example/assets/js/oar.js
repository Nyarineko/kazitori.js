// Generated by CoffeeScript 1.3.3
/*
Kazitori Path Helper
*/

(function(window) {
  var Oar, _GET_PATH;
  Oar = function() {};
  Oar.host = '';
  Oar.ASSET_DIR = 'assets';
  Oar.CSS_DIR = 'css';
  Oar.SCRIPT_DIR = 'js';
  Oar.IMAGE_DIR = 'images';
  Oar.data = 'data';
  Oar.deviceIsParent = true;
  Oar.strictSlash = false;
  Oar.pc = 'pc';
  Oar.sp = 'sp';
  Oar.tablet = 'tablet';
  Oar.ROOT = 'root';
  Oar.RELATIVE = 'relative';
  /*Oar.init
  */

  Oar.init = function(options) {
    var loc;
    loc = window.location;
    Oar.ASSET_DIR = options.packageRoot != null ? options.packageRoot : 'assets';
    Oar.CSS_DIR = options.css != null ? options.css : 'css';
    Oar.SCRIPT_DIR = options.js != null ? options.css : 'js';
    Oar.IMAGE_DIR = options.images != null ? options.images : 'images';
    Oar.data = options.data != null ? options.data : 'data';
    Oar.pc = options.pc != null ? options.pc : 'pc';
    Oar.sp = options.sp != null ? options.sp : 'sp';
    Oar.tablet = options.tablet ? options.tablet : 'tablet';
    Oar.host = options.host != null ? options.host : loc.host;
    Oar.root = options.root != null ? options.root : '/';
  };
  /*Oar.GET_CSS_PATH
  */

  Oar.GET_CSS_PATH = function(rule, device) {
    var func;
    func = rule === Oar.RELATIVE ? Oar.GET_RELATIVE_PATH : Oar.GET_ROOT_PATH;
    return func.apply(Oar, [Oar.CSS_DIR, device]);
  };
  /*Oar.GET_SCRIPT_PATH
  */

  Oar.GET_SCRIPT_PATH = function(rule, device) {
    func(rule === Oar.RELATIVE ? Oar.GET_RELATIVE_PATH : Oar.GET_ROOT_PATH);
    return func.apply(Oar, [Oar.CSS_DIR, device]);
  };
  /*Oar.GET_IMAGE_PATH
  */

  Oar.GET_IMAGE_PATH = function(rule, device) {
    func(rule === Oar.RELATIVE ? Oar.GET_RELATIVE_PATH : Oar.GET_ROOT_PATH);
    return func.apply(Oar, [Oar.IMAGE_DIR, device]);
  };
  /*Oar.GET_RELATIVE_PATH
  */

  Oar.GET_RELATIVE_PATH = function(asset, device) {
    var fragment, i, level, result;
    fragment = window.location.pathname;
    if (Oar.root != null) {
      fragment = fragment.replace(Oar.root, '');
    }
    level = fragment.split('/').length - 1;
    result = _GET_PATH(asset, device);
    i = 0;
    while (i < level) {
      result = '../' + result;
      i++;
    }
    if (Oar.strictSlash) {
      result + '/';
    }
    return result;
  };
  /*Oar.GET_ROOT_PATH
  */

  Oar.GET_ROOT_PATH = function(asset, device) {
    var result;
    result = '/' + _GET_PATH(asset, device);
    if (Oar.strictSlash) {
      result + '/';
    }
    return result;
  };
  _GET_PATH = function(asset, device) {
    var result, targetAsset, targetDev;
    targetDev = '';
    targetAsset = '';
    switch (device) {
      case Oar.PC_DIR:
        targetDev = Oar.PC_DIR;
        break;
      case Oar.TABLET_DIR:
        targetDev = Oar.TABLET_DIR;
        break;
      case Oar.SP_DIR:
        targetDev = Oar.SP_DIR;
        break;
      case COMMON_DIR:
        targetDev = Oar.COMMON_DIR;
        break;
      default:
        targetDev = '';
    }
    switch (asset) {
      case Oar.CSS_DIR:
        targetAsset = Oar.CSS_DIR;
        break;
      case Oar.IMAGE_DIR:
        targetAsset = Oar.IMAGE_DIR;
        break;
      case Oar.SCRIPT_DIR:
        targetAsset = Oar.SCRIPT_DIR;
        break;
      case Oar.DATA_DIR:
        targetAsset = Oar.DATA_DIR;
        break;
      default:
        throw new Error('asset typei fail');
    }
    if (targetDev != null) {
      result = Oar.deviceIsParent ? [Oar.ASSET_DIR, targetDev, targetAsset] : [Oar.ASSET_DIR, targetAsset, targetDev];
    } else {
      result = [Oar.ASSET_DIR, targetAsset];
    }
    result = result.join('/');
    return result;
  };
  return window.Oar = Oar;
})(window);
