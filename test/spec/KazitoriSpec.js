// Generated by CoffeeScript 1.4.0
(function() {
  var Router, controller, router,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.beforeAnytime = ["beforeAny"];

    Router.prototype.befores = {
      '/<int:id>': ['beforeShow']
    };

    Router.prototype.routes = {
      '/': 'index',
      '/<int:id>': 'show',
      '/posts': 'index',
      '/posts/<int:id>': 'show',
      '/posts/new': 'new',
      '/posts/<int:id>/edit': 'edit',
      '/users/<int:id>/posts/<int:id>': 'show'
    };

    Router.prototype.index = function() {
      return controller.index();
    };

    Router.prototype.show = function(id) {
      return controller.show(id);
    };

    Router.prototype.search = function() {
      return controller.search();
    };

    Router.prototype.beforeAny = function(a) {
      return console.log("before any");
    };

    Router.prototype.beforeShow = function(a, b) {
      return console.log("before show");
    };

    return Router;

  })(Kazitori);

  router = new Router();

  controller = {
    index: function() {
      return console.log('controller.index');
    },
    show: function(id) {
      return console.log("controller.show");
    },
    search: function() {
      return console.log("controller.search");
    }
  };

  describe("Kazitori", function() {
    beforeEach(function() {
      return router.change('/');
    });
    afterEach(function() {
      return router.change('/');
    });
    describe("property", function() {
      it("should started to be Truthy", function() {
        return expect(Kazitori.started).toBeTruthy();
      });
      it("test stop and restart", function() {
        router.stop();
        expect(Kazitori.started).toBeFalsy();
        return router.start();
      });
      it("test getHash", function() {
        router.change('/#hogehoge');
        return expect(router.getHash()).toEqual('hogehoge');
      });
      it("test getFragment", function() {
        router.change('/2/2/1/2/a/e');
        return expect(router.getFragment()).toEqual('/2/2/1/2/a/e');
      });
      return it("test isOldIE", function() {
        var msie;
        msie = navigator.appVersion.toLowerCase();
        msie = msie.indexOf('msie') > -1 ? parseInt(msie.replace(/.*msie[ ]/, '').match(/^[0-9]+/)) : 0;
        if (msie === 0) {
          return expect(router.isOldIE).toBeFalsy();
        } else if (msie <= 9) {
          return expect(router.isOldIE).toBeTruthy();
        }
      });
    });
    describe("event", function() {
      return it("test change event", function() {
        var _next, _onChange, _onChangeCalled, _prev;
        _prev = "/valvalval/";
        _next = "/29y843g2w3t98n";
        router.change("" + _prev);
        expect(window.location.pathname).toEqual("" + _prev);
        _onChangeCalled = false;
        _onChange = function(e) {
          _onChangeCalled = true;
          expect(e.prev).toEqual("" + _prev);
          return expect(e.next).toEqual("" + _next);
        };
        router.addEventListener(KazitoriEvent.CHANGE, _onChange);
        router.change("" + _next);
        expect(_onChangeCalled).toBeTruthy();
        return router.removeEventListener(KazitoriEvent.CHANGE, _onChange);
      });
    });
    xit("test routes (simple)", function() {
      location.replace("" + location.origin + "/posts/1");
      return expect(window.location.pathname).toEqual('/posts/1');
    });
    it("can be change location (simple)", function() {
      router.change('/posts/1');
      return expect(window.location.pathname).toEqual('/posts/1');
    });
    it("can be change location (two part)", function() {
      router.change('/users/3/posts/1');
      return expect(window.location.pathname).toEqual('/users/3/posts/1');
    });
    return describe("with controller", function() {
      beforeEach(function() {
        spyOn(controller, 'index');
        return spyOn(controller, 'show');
      });
      it('should be called', function() {
        router.change('/posts/1');
        return expect(controller.show).toHaveBeenCalled();
      });
      return it('should be called with casted argments', function() {
        router.change('/posts/32941856');
        return expect(controller.show).toHaveBeenCalledWith(32941856);
      });
    });
  });

}).call(this);
